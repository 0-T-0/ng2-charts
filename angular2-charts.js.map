{"version":3,"sources":["webpack:///./ng2-charts.ts?be72","webpack:///./components/charts/charts.ts?0ed4"],"names":[],"mappings":";;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;;;;;;;;ACJA;AACA;AACA;AACA;AACA,6CAA4C,QAAQ;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA,EAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,yBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAkC,uDAAuD;AACzF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAkC,iFAAiF;AACnH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA2C,wBAAwB,EAAE;AACrE;AACA;AACA;AACA,wBAAuB,sBAAsB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAuD,cAAc;AACrE;AACA,UAAS;AACT;AACA;AACA;AACA,EAAC;AACD;AACA","file":"angular2-charts.js","sourcesContent":["\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\n__export(require('./components/charts/charts'));\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./ng2-charts.ts\n ** module id = 15\n ** module chunks = 1 2\n **/","\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nvar core_1 = require('angular2/core');\nvar common_1 = require('angular2/common');\nvar Charts = (function () {\n    function Charts(element) {\n    }\n    Charts = __decorate([\n        core_1.Component({\n            selector: 'chart, canvas[chart]',\n            template: \"<canvas></canvas>\",\n            directives: [common_1.CORE_DIRECTIVES, common_1.NgClass]\n        }), \n        __metadata('design:paramtypes', [core_1.ElementRef])\n    ], Charts);\n    return Charts;\n}());\nexports.Charts = Charts;\nvar BaseChart = (function () {\n    function BaseChart(element) {\n        this.element = element;\n        this.data = [];\n        this.labels = [];\n        this.options = { responsive: true };\n        this.series = [];\n        this.colours = [];\n        this.initFlag = false;\n        this.chartClick = new core_1.EventEmitter();\n        this.chartHover = new core_1.EventEmitter();\n        this.defaultsColours = [\n            {\n                fillColor: 'rgba(151,187,205,0.2)',\n                strokeColor: 'rgba(151,187,205,1)',\n                pointColor: 'rgba(151,187,205,1)',\n                pointStrokeColor: '#fff',\n                pointHighlightFill: '#fff',\n                pointHighlightStroke: 'rgba(151,187,205,0.8)',\n                color: 'rgba(151,187,205,1)',\n                highlight: 'rgba(151,187,205,0.8)'\n            }, {\n                fillColor: 'rgba(220,220,220,0.2)',\n                strokeColor: 'rgba(220,220,220,1)',\n                pointColor: 'rgba(220,220,220,1)',\n                pointStrokeColor: '#fff',\n                pointHighlightFill: '#fff',\n                pointHighlightStroke: 'rgba(220,220,220,0.8)',\n                color: 'rgba(220,220,220,1)',\n                highlight: 'rgba(220,220,220,0.8)'\n            }, {\n                fillColor: 'rgba(247,70,74,0.2)',\n                strokeColor: 'rgba(247,70,74,1)',\n                pointColor: 'rgba(247,70,74,1)',\n                pointStrokeColor: '#fff',\n                pointHighlightFill: '#fff',\n                pointHighlightStroke: 'rgba(247,70,74,0.8)',\n                color: 'rgba(247,70,74,1)',\n                highlight: 'rgba(247,70,74,0.8)'\n            }, {\n                fillColor: 'rgba(70,191,189,0.2)',\n                strokeColor: 'rgba(70,191,189,1)',\n                pointColor: 'rgba(70,191,189,1)',\n                pointStrokeColor: '#fff',\n                pointHighlightFill: '#fff',\n                pointHighlightStroke: 'rgba(70,191,189,0.8)',\n                color: 'rgba(70,191,189,1)',\n                highlight: 'rgba(70,191,189,0.8)'\n            }, {\n                fillColor: 'rgba(253,180,92,0.2)',\n                strokeColor: 'rgba(253,180,92,1)',\n                pointColor: 'rgba(253,180,92,1)',\n                pointStrokeColor: '#fff',\n                pointHighlightFill: '#fff',\n                pointHighlightStroke: 'rgba(253,180,92,0.8)',\n                color: 'rgba(253,180,92,1)',\n                highlight: 'rgba(253,180,92,0.8)'\n            }, {\n                fillColor: 'rgba(148,159,177,0.2)',\n                strokeColor: 'rgba(148,159,177,1)',\n                pointColor: 'rgba(148,159,177,1)',\n                pointStrokeColor: '#fff',\n                pointHighlightFill: '#fff',\n                pointHighlightStroke: 'rgba(148,159,177,0.8)',\n                color: 'rgba(148,159,177,1)',\n                highlight: 'rgba(148,159,177,0.8)'\n            }, {\n                fillColor: 'rgba(77,83,96,0.2)',\n                strokeColor: 'rgba(77,83,96,1)',\n                pointColor: 'rgba(77,83,96,1)',\n                pointStrokeColor: '#fff',\n                pointHighlightFill: '#fff',\n                pointHighlightStroke: 'rgba(77,83,96,0.8)',\n                color: 'rgba(77,83,96,1)',\n                highlight: 'rgba(77,83,96,0.8)'\n            }];\n    }\n    BaseChart.prototype.ngOnInit = function () {\n        this.ctx = this.element.nativeElement.children[0].getContext('2d');\n        this.cvs = this.element.nativeElement.children[0];\n        this.parent = this.element.nativeElement;\n        this.refresh();\n        this.initFlag = true;\n    };\n    BaseChart.prototype.ngOnChanges = function () {\n        if (this.initFlag) {\n            this.refresh();\n        }\n    };\n    BaseChart.prototype.ngOnDestroy = function () {\n        if (this.chart) {\n            this.chart.destroy();\n            this.chart = null;\n        }\n        if (this.legendTemplate) {\n            this.legendTemplate.destroy();\n            this.legendTemplate = null;\n        }\n    };\n    BaseChart.prototype.setLegend = function () {\n        var list = this.parent.getElementsByTagName('ul');\n        if (list.length) {\n            list[0].remove();\n            this.parent.insertAdjacentHTML('beforeend', this.chart.generateLegend());\n        }\n        else {\n            this.parent.insertAdjacentHTML('beforeend', this.chart.generateLegend());\n        }\n    };\n    BaseChart.prototype.getColour = function (colour) {\n        return {\n            fillColor: this.rgba(colour, 0.2),\n            strokeColor: this.rgba(colour, 1),\n            pointColor: this.rgba(colour, 1),\n            pointStrokeColor: '#fff',\n            pointHighlightFill: '#fff',\n            pointHighlightStroke: this.rgba(colour, 0.8),\n            color: this.rgba(colour, 1),\n            highlight: this.rgba(colour, 0.8)\n        };\n    };\n    BaseChart.prototype.getRandomInt = function (min, max) {\n        return Math.floor(Math.random() * (max - min + 1)) + min;\n    };\n    BaseChart.prototype.rgba = function (colour, alpha) {\n        return 'rgba(' + colour.concat(alpha).join(',') + ')';\n    };\n    BaseChart.prototype.click = function (evt) {\n        var atEvent = this.chart.getPointsAtEvent || this.chart.getBarsAtEvent || this.chart.getSegmentsAtEvent;\n        var activePoints = atEvent.call(this.chart, evt);\n        if (activePoints.length > 0) {\n            var activeLabel = activePoints[0].label;\n            this.chartClick.emit({ activePoints: activePoints, activeLabel: activeLabel });\n        }\n    };\n    BaseChart.prototype.hover = function (evt) {\n        var atEvent = this.chart.getPointsAtEvent || this.chart.getBarsAtEvent || this.chart.getSegmentsAtEvent;\n        var activePoints = atEvent.call(this.chart, evt);\n        if (activePoints.length > 0) {\n            var activeLabel = activePoints[0].label;\n            var activePoint = activePoints[0].value;\n            this.chartHover.emit({ activePoints: activePoints, activePoint: activePoint, activeLabel: activeLabel });\n        }\n    };\n    BaseChart.prototype.getChartBuilder = function (ctx, data, options) {\n        return new Chart(ctx)[this.chartType](data, options);\n    };\n    BaseChart.prototype.getDataObject = function (label, value) {\n        if (this.chartType === 'Line'\n            || this.chartType === 'Bar'\n            || this.chartType === 'Radar') {\n            return {\n                label: label,\n                data: value\n            };\n        }\n        if (this.chartType === 'Pie'\n            || this.chartType === 'Doughnut'\n            || this.chartType === 'PolarArea') {\n            return {\n                label: label,\n                value: value\n            };\n        }\n        return null;\n    };\n    BaseChart.prototype.getChartData = function (labels, dataObject) {\n        if (this.chartType === 'Line'\n            || this.chartType === 'Bar'\n            || this.chartType === 'Radar') {\n            return {\n                labels: labels,\n                datasets: dataObject\n            };\n        }\n        if (this.chartType === 'Pie'\n            || this.chartType === 'Doughnut'\n            || this.chartType === 'PolarArea') {\n            return dataObject;\n        }\n    };\n    BaseChart.prototype.refresh = function () {\n        var _this = this;\n        if (this.options.responsive && this.parent.clientHeight === 0) {\n            return setTimeout(function () { return _this.refresh(); }, 50);\n        }\n        this.ngOnDestroy();\n        var dataset = [];\n        for (var i = 0; i < this.data.length; i++) {\n            var colourDesc = [this.getRandomInt(0, 255), this.getRandomInt(0, 255), this.getRandomInt(0, 255)];\n            var colour = i < this.colours.length ? this.colours[i] : this.defaultsColours[i] || this.getColour(colourDesc);\n            var data_1 = Object.assign(colour, this.getDataObject(this.series[i] || this.labels[i], this.data[i]));\n            dataset.push(data_1);\n        }\n        var data = this.getChartData(this.labels, dataset);\n        this.chart = this.getChartBuilder(this.ctx, data, this.options);\n        if (this.legend) {\n            this.setLegend();\n        }\n    };\n    __decorate([\n        core_1.Input(), \n        __metadata('design:type', Array)\n    ], BaseChart.prototype, \"data\", void 0);\n    __decorate([\n        core_1.Input(), \n        __metadata('design:type', Array)\n    ], BaseChart.prototype, \"labels\", void 0);\n    __decorate([\n        core_1.Input(), \n        __metadata('design:type', Object)\n    ], BaseChart.prototype, \"options\", void 0);\n    __decorate([\n        core_1.Input(), \n        __metadata('design:type', String)\n    ], BaseChart.prototype, \"chartType\", void 0);\n    __decorate([\n        core_1.Input(), \n        __metadata('design:type', Array)\n    ], BaseChart.prototype, \"series\", void 0);\n    __decorate([\n        core_1.Input(), \n        __metadata('design:type', Array)\n    ], BaseChart.prototype, \"colours\", void 0);\n    __decorate([\n        core_1.Input(), \n        __metadata('design:type', Boolean)\n    ], BaseChart.prototype, \"legend\", void 0);\n    BaseChart = __decorate([\n        core_1.Component({\n            selector: 'base-chart',\n            properties: [\n                'data',\n                'labels',\n                'series',\n                'colours',\n                'chartType',\n                'legend',\n                'options'\n            ],\n            events: ['chartClick', 'chartHover'],\n            template: \"\\n  <canvas style=\\\"width: 100%; height: 100%;\\\" (click)=\\\"click($event)\\\" (mousemove)=\\\"hover($event)\\\"></canvas>\\n  \",\n            directives: [common_1.CORE_DIRECTIVES, common_1.FORM_DIRECTIVES, common_1.NgClass]\n        }), \n        __metadata('design:paramtypes', [core_1.ElementRef])\n    ], BaseChart);\n    return BaseChart;\n}());\nexports.BaseChart = BaseChart;\nexports.CHART_DIRECTIVES = [Charts, BaseChart];\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./components/charts/charts.ts\n ** module id = 117\n ** module chunks = 1 2\n **/"],"sourceRoot":""}