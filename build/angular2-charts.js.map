{"version":3,"sources":["webpack:///angular2-charts.js","webpack:///./ng2-charts.ts?2582","webpack:///./components/charts/charts.ts?4115"],"names":["webpackJsonp",0,"module","exports","__webpack_require__",12,"__export","m","p","hasOwnProperty",95,"__decorate","this","decorators","target","key","desc","d","c","arguments","length","r","Object","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","__metadata","k","v","metadata","core_1","common_1","Charts","ElementRef","BaseChart","BaseChart.constructor","BaseChart.ngOnInit","BaseChart.ngOnDestroy","get","BaseChart.data","set","enumerable","configurable","BaseChart.chartType","BaseChart.setLegend","BaseChart.getColour","BaseChart.getRandomInt","BaseChart.rgba","BaseChart.click","BaseChart.hover","BaseChart.getChartBuilder","BaseChart.getDataObject","BaseChart.getChartData","BaseChart.refresh","CHART_DIRECTIVES"],"mappings":"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","file":"angular2-charts.js","sourcesContent":["webpackJsonp([2],{\n\n/***/ 0:\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(12);\n\n\n/***/ },\n\n/***/ 12:\n/***/ function(module, exports, __webpack_require__) {\n\n\tfunction __export(m) {\n\t    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n\t}\n\t__export(__webpack_require__(95));\n\n\n/***/ },\n\n/***/ 95:\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n\t    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n\t    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n\t    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n\t    return c > 3 && r && Object.defineProperty(target, key, r), r;\n\t};\n\tvar __metadata = (this && this.__metadata) || function (k, v) {\n\t    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n\t};\n\tvar core_1 = __webpack_require__(2);\n\tvar common_1 = __webpack_require__(6);\n\tvar Charts = (function () {\n\t    function Charts(element) {\n\t    }\n\t    Charts = __decorate([\n\t        core_1.Component({\n\t            selector: 'chart, canvas[chart]',\n\t            template: \"<canvas></canvas>\",\n\t            directives: [common_1.CORE_DIRECTIVES, common_1.NgClass]\n\t        }), \n\t        __metadata('design:paramtypes', [core_1.ElementRef])\n\t    ], Charts);\n\t    return Charts;\n\t})();\n\texports.Charts = Charts;\n\tvar BaseChart = (function () {\n\t    function BaseChart(element) {\n\t        this.element = element;\n\t        this._data = [];\n\t        this.labels = [];\n\t        this.options = { responsive: true };\n\t        this.series = [];\n\t        this.colours = [];\n\t        this.initFlag = false;\n\t        this.chartClick = new core_1.EventEmitter();\n\t        this.chartHover = new core_1.EventEmitter();\n\t        this.defaultsColours = [\n\t            {\n\t                fillColor: 'rgba(151,187,205,0.2)',\n\t                strokeColor: 'rgba(151,187,205,1)',\n\t                pointColor: 'rgba(151,187,205,1)',\n\t                pointStrokeColor: '#fff',\n\t                pointHighlightFill: '#fff',\n\t                pointHighlightStroke: 'rgba(151,187,205,0.8)',\n\t                color: 'rgba(151,187,205,1)',\n\t                highlight: 'rgba(151,187,205,0.8)'\n\t            }, {\n\t                fillColor: 'rgba(220,220,220,0.2)',\n\t                strokeColor: 'rgba(220,220,220,1)',\n\t                pointColor: 'rgba(220,220,220,1)',\n\t                pointStrokeColor: '#fff',\n\t                pointHighlightFill: '#fff',\n\t                pointHighlightStroke: 'rgba(220,220,220,0.8)',\n\t                color: 'rgba(220,220,220,1)',\n\t                highlight: 'rgba(220,220,220,0.8)'\n\t            }, {\n\t                fillColor: 'rgba(247,70,74,0.2)',\n\t                strokeColor: 'rgba(247,70,74,1)',\n\t                pointColor: 'rgba(247,70,74,1)',\n\t                pointStrokeColor: '#fff',\n\t                pointHighlightFill: '#fff',\n\t                pointHighlightStroke: 'rgba(247,70,74,0.8)',\n\t                color: 'rgba(247,70,74,1)',\n\t                highlight: 'rgba(247,70,74,0.8)'\n\t            }, {\n\t                fillColor: 'rgba(70,191,189,0.2)',\n\t                strokeColor: 'rgba(70,191,189,1)',\n\t                pointColor: 'rgba(70,191,189,1)',\n\t                pointStrokeColor: '#fff',\n\t                pointHighlightFill: '#fff',\n\t                pointHighlightStroke: 'rgba(70,191,189,0.8)',\n\t                color: 'rgba(70,191,189,1)',\n\t                highlight: 'rgba(70,191,189,0.8)'\n\t            }, {\n\t                fillColor: 'rgba(253,180,92,0.2)',\n\t                strokeColor: 'rgba(253,180,92,1)',\n\t                pointColor: 'rgba(253,180,92,1)',\n\t                pointStrokeColor: '#fff',\n\t                pointHighlightFill: '#fff',\n\t                pointHighlightStroke: 'rgba(253,180,92,0.8)',\n\t                color: 'rgba(253,180,92,1)',\n\t                highlight: 'rgba(253,180,92,0.8)'\n\t            }, {\n\t                fillColor: 'rgba(148,159,177,0.2)',\n\t                strokeColor: 'rgba(148,159,177,1)',\n\t                pointColor: 'rgba(148,159,177,1)',\n\t                pointStrokeColor: '#fff',\n\t                pointHighlightFill: '#fff',\n\t                pointHighlightStroke: 'rgba(148,159,177,0.8)',\n\t                color: 'rgba(148,159,177,1)',\n\t                highlight: 'rgba(148,159,177,0.8)'\n\t            }, {\n\t                fillColor: 'rgba(77,83,96,0.2)',\n\t                strokeColor: 'rgba(77,83,96,1)',\n\t                pointColor: 'rgba(77,83,96,1)',\n\t                pointStrokeColor: '#fff',\n\t                pointHighlightFill: '#fff',\n\t                pointHighlightStroke: 'rgba(77,83,96,0.8)',\n\t                color: 'rgba(77,83,96,1)',\n\t                highlight: 'rgba(77,83,96,0.8)'\n\t            }];\n\t    }\n\t    BaseChart.prototype.ngOnInit = function () {\n\t        console.log(\"I should be here \" + this.chartType);\n\t        this.ctx = this.element.nativeElement.children[0].getContext('2d');\n\t        this.cvs = this.element.nativeElement.children[0];\n\t        this.parent = this.element.nativeElement;\n\t        this.refresh();\n\t        this.initFlag = true;\n\t    };\n\t    BaseChart.prototype.ngOnDestroy = function () {\n\t        if (this.chart) {\n\t            this.chart.destroy();\n\t            this.chart = null;\n\t        }\n\t        if (this.legendTemplate) {\n\t            this.legendTemplate.destroy();\n\t            this.legendTemplate = null;\n\t        }\n\t    };\n\t    Object.defineProperty(BaseChart.prototype, \"data\", {\n\t        get: function () {\n\t            return this._data;\n\t        },\n\t        set: function (value) {\n\t            this._data = value;\n\t            if (this.initFlag && this._data && this._data.length > 0) {\n\t                this.refresh();\n\t            }\n\t        },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    Object.defineProperty(BaseChart.prototype, \"chartType\", {\n\t        get: function () {\n\t            return this._chartType;\n\t        },\n\t        set: function (value) {\n\t            this._chartType = value;\n\t            if (this.initFlag && this._chartType && this._chartType.length > 0) {\n\t                this.refresh();\n\t            }\n\t        },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    BaseChart.prototype.setLegend = function () {\n\t        var list = this.parent.getElementsByTagName('ul');\n\t        if (list.length) {\n\t            list[0].remove();\n\t            this.parent.insertAdjacentHTML('beforeend', this.chart.generateLegend());\n\t        }\n\t        else {\n\t            this.parent.insertAdjacentHTML('beforeend', this.chart.generateLegend());\n\t        }\n\t    };\n\t    BaseChart.prototype.getColour = function (colour) {\n\t        return {\n\t            fillColor: this.rgba(colour, 0.2),\n\t            strokeColor: this.rgba(colour, 1),\n\t            pointColor: this.rgba(colour, 1),\n\t            pointStrokeColor: '#fff',\n\t            pointHighlightFill: '#fff',\n\t            pointHighlightStroke: this.rgba(colour, 0.8),\n\t            color: this.rgba(colour, 1),\n\t            highlight: this.rgba(colour, 0.8)\n\t        };\n\t    };\n\t    BaseChart.prototype.getRandomInt = function (min, max) {\n\t        return Math.floor(Math.random() * (max - min + 1)) + min;\n\t    };\n\t    BaseChart.prototype.rgba = function (colour, alpha) {\n\t        return 'rgba(' + colour.concat(alpha).join(',') + ')';\n\t    };\n\t    BaseChart.prototype.click = function (evt) {\n\t        var atEvent = this.chart.getPointsAtEvent || this.chart.getBarsAtEvent || this.chart.getSegmentsAtEvent;\n\t        var activePoints = atEvent.call(this.chart, evt);\n\t        if (activePoints.length > 0) {\n\t            var activeLabel = activePoints[0].label;\n\t            this.chartClick.emit({ activePoints: activePoints, activeLabel: activeLabel });\n\t        }\n\t        else {\n\t            console.log('not point');\n\t        }\n\t    };\n\t    BaseChart.prototype.hover = function (evt) {\n\t        var atEvent = this.chart.getPointsAtEvent || this.chart.getBarsAtEvent || this.chart.getSegmentsAtEvent;\n\t        var activePoints = atEvent.call(this.chart, evt);\n\t        if (activePoints.length > 0) {\n\t            var activeLabel = activePoints[0].label;\n\t            var activePoint = activePoints[0].value;\n\t            this.chartHover.emit({ activePoints: activePoints, activePoint: activePoint, activeLabel: activeLabel });\n\t        }\n\t        else {\n\t            console.log('not point');\n\t        }\n\t    };\n\t    BaseChart.prototype.getChartBuilder = function (ctx, data, options) {\n\t        return new Chart(ctx)[this.chartType](data, options);\n\t    };\n\t    BaseChart.prototype.getDataObject = function (label, value) {\n\t        if (this.chartType === 'Line'\n\t            || this.chartType === 'Bar'\n\t            || this.chartType === 'Radar') {\n\t            return {\n\t                label: label,\n\t                data: value\n\t            };\n\t        }\n\t        if (this.chartType === 'Pie'\n\t            || this.chartType === 'Doughnut'\n\t            || this.chartType === 'PolarArea') {\n\t            return {\n\t                label: label,\n\t                value: value\n\t            };\n\t        }\n\t        return null;\n\t    };\n\t    BaseChart.prototype.getChartData = function (labels, dataObject) {\n\t        if (this.chartType === 'Line'\n\t            || this.chartType === 'Bar'\n\t            || this.chartType === 'Radar') {\n\t            return {\n\t                labels: labels,\n\t                datasets: dataObject\n\t            };\n\t        }\n\t        if (this.chartType === 'Pie'\n\t            || this.chartType === 'Doughnut'\n\t            || this.chartType === 'PolarArea') {\n\t            return dataObject;\n\t        }\n\t    };\n\t    BaseChart.prototype.refresh = function () {\n\t        this.ngOnDestroy();\n\t        var dataset = [];\n\t        for (var i = 0; i < this.data.length; i++) {\n\t            var colourDesc = [this.getRandomInt(0, 255), this.getRandomInt(0, 255), this.getRandomInt(0, 255)];\n\t            var colour = i < this.colours.length ? this.colours[i] : this.defaultsColours[i] || this.getColour(colourDesc);\n\t            var data_1 = Object.assign(colour, this.getDataObject(this.series[i] || this.labels[i], this.data[i]));\n\t            dataset.push(data_1);\n\t        }\n\t        var data = this.getChartData(this.labels, dataset);\n\t        this.chart = this.getChartBuilder(this.ctx, data, this.options);\n\t        if (this.legend) {\n\t            this.setLegend();\n\t        }\n\t    };\n\t    BaseChart = __decorate([\n\t        core_1.Component({\n\t            selector: 'base-chart',\n\t            properties: [\n\t                'data',\n\t                'labels',\n\t                'series',\n\t                'colours',\n\t                'chartType',\n\t                'legend',\n\t                'options'\n\t            ],\n\t            events: ['chartClick', 'chartHover'],\n\t            template: \"\\n  <canvas style=\\\"width: 100%; height: 100%;\\\" (click)=\\\"click($event)\\\" (mousemove)=\\\"hover($event)\\\"></canvas>\\n  \",\n\t            directives: [common_1.CORE_DIRECTIVES, common_1.FORM_DIRECTIVES, common_1.NgClass]\n\t        }), \n\t        __metadata('design:paramtypes', [core_1.ElementRef])\n\t    ], BaseChart);\n\t    return BaseChart;\n\t})();\n\texports.BaseChart = BaseChart;\n\texports.CHART_DIRECTIVES = [Charts, BaseChart];\n\n\n/***/ }\n\n});\n\n\n/** WEBPACK FOOTER **\n ** angular2-charts.js\n **/","export * from  './components/charts/charts';\n\n\n\n/** WEBPACK FOOTER **\n ** ./ng2-charts.ts\n **/","import {\n  Component, View,\n  Directive, AfterViewChecked, OnDestroy, OnInit,\n  EventEmitter, ElementRef, Input\n} from 'angular2/core';\nimport {CORE_DIRECTIVES, FORM_DIRECTIVES, NgClass} from 'angular2/common';\n\ndeclare var Chart:any;\n\n@Component({\n  selector: 'chart, canvas[chart]',\n  template: `<canvas></canvas>`,\n  directives: [CORE_DIRECTIVES, NgClass]\n})\nexport class Charts {\n  constructor(element:ElementRef) {\n  }\n\n}\n\n@Component({\n  selector: 'base-chart',\n  properties: [\n    'data',\n    'labels',\n    'series',\n    'colours',\n    'chartType',\n    'legend',\n    'options'\n  ],\n  events: ['chartClick', 'chartHover'],\n  template: `\n  <canvas style=\"width: 100%; height: 100%;\" (click)=\"click($event)\" (mousemove)=\"hover($event)\"></canvas>\n  `,\n  directives: [CORE_DIRECTIVES, FORM_DIRECTIVES, NgClass]\n})\nexport class BaseChart implements OnInit, OnDestroy {\n  private ctx:any;\n  private cvs:any;\n  private parent:any;\n  private chart:any;\n  private _data:Array<any> = [];\n  private labels:Array<any> = [];\n  private options:any = {responsive: true};\n  private _chartType:string;\n  private series:Array<any> = [];\n  private colours:Array<any> = [];\n  private legend:boolean;\n  private legendTemplate:any;\n  private initFlag:boolean = false;\n  private chartClick:EventEmitter<any> = new EventEmitter();\n  private chartHover:EventEmitter<any> = new EventEmitter();\n  private defaultsColours:Array<any> = [\n    {\n      fillColor: 'rgba(151,187,205,0.2)',\n      strokeColor: 'rgba(151,187,205,1)',\n      pointColor: 'rgba(151,187,205,1)',\n      pointStrokeColor: '#fff',\n      pointHighlightFill: '#fff',\n      pointHighlightStroke: 'rgba(151,187,205,0.8)',\n      color: 'rgba(151,187,205,1)',\n      highlight: 'rgba(151,187,205,0.8)'\n    }, {\n      fillColor: 'rgba(220,220,220,0.2)',\n      strokeColor: 'rgba(220,220,220,1)',\n      pointColor: 'rgba(220,220,220,1)',\n      pointStrokeColor: '#fff',\n      pointHighlightFill: '#fff',\n      pointHighlightStroke: 'rgba(220,220,220,0.8)',\n      color: 'rgba(220,220,220,1)',\n      highlight: 'rgba(220,220,220,0.8)'\n    }, {\n      fillColor: 'rgba(247,70,74,0.2)',\n      strokeColor: 'rgba(247,70,74,1)',\n      pointColor: 'rgba(247,70,74,1)',\n      pointStrokeColor: '#fff',\n      pointHighlightFill: '#fff',\n      pointHighlightStroke: 'rgba(247,70,74,0.8)',\n      color: 'rgba(247,70,74,1)',\n      highlight: 'rgba(247,70,74,0.8)'\n    }, {\n      fillColor: 'rgba(70,191,189,0.2)',\n      strokeColor: 'rgba(70,191,189,1)',\n      pointColor: 'rgba(70,191,189,1)',\n      pointStrokeColor: '#fff',\n      pointHighlightFill: '#fff',\n      pointHighlightStroke: 'rgba(70,191,189,0.8)',\n      color: 'rgba(70,191,189,1)',\n      highlight: 'rgba(70,191,189,0.8)'\n    }, {\n      fillColor: 'rgba(253,180,92,0.2)',\n      strokeColor: 'rgba(253,180,92,1)',\n      pointColor: 'rgba(253,180,92,1)',\n      pointStrokeColor: '#fff',\n      pointHighlightFill: '#fff',\n      pointHighlightStroke: 'rgba(253,180,92,0.8)',\n      color: 'rgba(253,180,92,1)',\n      highlight: 'rgba(253,180,92,0.8)'\n    }, {\n      fillColor: 'rgba(148,159,177,0.2)',\n      strokeColor: 'rgba(148,159,177,1)',\n      pointColor: 'rgba(148,159,177,1)',\n      pointStrokeColor: '#fff',\n      pointHighlightFill: '#fff',\n      pointHighlightStroke: 'rgba(148,159,177,0.8)',\n      color: 'rgba(148,159,177,1)',\n      highlight: 'rgba(148,159,177,0.8)'\n    }, {\n      fillColor: 'rgba(77,83,96,0.2)',\n      strokeColor: 'rgba(77,83,96,1)',\n      pointColor: 'rgba(77,83,96,1)',\n      pointStrokeColor: '#fff',\n      pointHighlightFill: '#fff',\n      pointHighlightStroke: 'rgba(77,83,96,0.8)',\n      color: 'rgba(77,83,96,1)',\n      highlight: 'rgba(77,83,96,0.8)'\n    }];\n\n\n  constructor(private element:ElementRef) {\n  }\n\n  ngOnInit() {\n    console.log(`I should be here ${this.chartType}`);\n    this.ctx = this.element.nativeElement.children[0].getContext('2d');\n    this.cvs = this.element.nativeElement.children[0];\n    this.parent = this.element.nativeElement;\n    this.refresh();\n    this.initFlag = true;\n  }\n\n  ngOnDestroy() {\n    if (this.chart) {\n      this.chart.destroy();\n      this.chart = null;\n    }\n    if (this.legendTemplate) {\n      this.legendTemplate.destroy();\n      this.legendTemplate = null;\n    }\n  }\n\n  private get data() {\n    return this._data;\n  }\n\n  private set data(value) {\n    this._data = value;\n    if (this.initFlag && this._data && this._data.length > 0) {\n      this.refresh();\n    }\n  }\n\n  private get chartType() {\n    return this._chartType;\n  }\n\n  private set chartType(value) {\n    this._chartType = value;\n    if (this.initFlag && this._chartType && this._chartType.length > 0) {\n      this.refresh();\n    }\n  }\n\n  setLegend() {\n    let list = this.parent.getElementsByTagName('ul');\n    if (list.length) {\n      list[0].remove();\n      this.parent.insertAdjacentHTML('beforeend', this.chart.generateLegend());\n    } else {\n      this.parent.insertAdjacentHTML('beforeend', this.chart.generateLegend());\n    }\n  }\n\n  getColour(colour:Array<number>):any {\n    return {\n      fillColor: this.rgba(colour, 0.2),\n      strokeColor: this.rgba(colour, 1),\n      pointColor: this.rgba(colour, 1),\n      pointStrokeColor: '#fff',\n      pointHighlightFill: '#fff',\n      pointHighlightStroke: this.rgba(colour, 0.8),\n      color: this.rgba(colour, 1),\n      highlight: this.rgba(colour, 0.8)\n    };\n  }\n\n  getRandomInt(min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  }\n\n  rgba(colour, alpha) {\n    return 'rgba(' + colour.concat(alpha).join(',') + ')';\n  }\n\n  public click(evt) {\n    let atEvent = this.chart.getPointsAtEvent || this.chart.getBarsAtEvent || this.chart.getSegmentsAtEvent;\n    let activePoints = atEvent.call(this.chart, evt);\n    if (activePoints.length > 0) {\n      let activeLabel = activePoints[0].label;\n      this.chartClick.emit({activePoints: activePoints, activeLabel: activeLabel});\n    } else {\n      console.log('not point');\n    }\n  }\n\n  public hover(evt) {\n    let atEvent = this.chart.getPointsAtEvent || this.chart.getBarsAtEvent || this.chart.getSegmentsAtEvent;\n    let activePoints = atEvent.call(this.chart, evt);\n    if (activePoints.length > 0) {\n      let activeLabel = activePoints[0].label;\n      let activePoint = activePoints[0].value;\n      this.chartHover.emit({activePoints: activePoints, activePoint: activePoint, activeLabel: activeLabel});\n    } else {\n      console.log('not point');\n    }\n  }\n\n  getChartBuilder(ctx:any, data:Array<any>, options:any) {\n    return new Chart(ctx)[this.chartType](data, options);\n  }\n\n  getDataObject(label:string, value:any):any {\n    if (this.chartType === 'Line'\n      || this.chartType === 'Bar'\n      || this.chartType === 'Radar') {\n      return {\n        label: label,\n        data: value\n      };\n    }\n\n    if (this.chartType === 'Pie'\n      || this.chartType === 'Doughnut'\n      || this.chartType === 'PolarArea') {\n      return {\n        label: label,\n        value: value\n      };\n    }\n\n    return null;\n  }\n\n  getChartData(labels:any, dataObject:any) {\n    if (this.chartType === 'Line'\n      || this.chartType === 'Bar'\n      || this.chartType === 'Radar') {\n      return {\n        labels: labels,\n        datasets: dataObject\n      };\n    }\n    if (this.chartType === 'Pie'\n      || this.chartType === 'Doughnut'\n      || this.chartType === 'PolarArea') {\n      return dataObject;\n    }\n\n  }\n\n  private refresh() {\n\n    this.ngOnDestroy();\n    let dataset:Array<any> = [];\n\n    for (let i = 0; i < this.data.length; i++) {\n\n      let colourDesc:Array<number> = [this.getRandomInt(0, 255), this.getRandomInt(0, 255), this.getRandomInt(0, 255)];\n      let colour = i < this.colours.length ? this.colours[i] : this.defaultsColours[i] || this.getColour(colourDesc);\n\n\n      let data:any = (<any>Object).assign(colour,\n        this.getDataObject(this.series[i] || this.labels[i], this.data[i]));\n\n      dataset.push(data);\n\n    }\n    let data:any = this.getChartData(this.labels, dataset);\n\n    this.chart = this.getChartBuilder(this.ctx, data, this.options);\n\n    if (this.legend) {\n      this.setLegend();\n    }\n  }\n}\n\n\nexport const CHART_DIRECTIVES:Array<any> = [Charts, BaseChart];\n\n\n\n/** WEBPACK FOOTER **\n ** ./components/charts/charts.ts\n **/"],"sourceRoot":""}